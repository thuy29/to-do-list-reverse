name: CI/CD Workflow

on:
  push:
    branches:
      - dev
      - main

permissions:
  contents: write

jobs:
  dev-workflow:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: dev
          head: my-feature
          title: "Pull Request from new branch to dev"
          body: "Automatically created PR from GitHub Actions."


      - name: Dependencies install for backend
        run: |
          cd backend
          npm install

      - name: Tests for backend
        run: |
          cd backend
          npm test

      - name: Dependencies install for frontend
        run: |
          cd frontend
          npm install

      - name: Tests for frontend
        run: |
          cd frontend
          npm test

      - name: Merge dev into main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin
          git checkout main
          git merge dev --no-ff
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  main-workflow:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Dependencies install for backend
        run: |
          cd backend
          npm install

      - name: Tests for backend
        run: |
          cd backend
          npm test

      - name: Dependencies install for frontend
        run: |
          cd frontend
          npm install

      - name: Tests for frontend
        run: |
          cd frontend
          npm test

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Docker compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Verify Docker compose
        run: docker-compose --version

      - name: (Build/ Push) Docker image
        run: |
          docker-compose build
          docker-compose push
